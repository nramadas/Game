// Generated by CoffeeScript 1.6.3
(function() {
  var offset_game_object_coords,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  offset_game_object_coords = function(game_object) {
    var new_coords;
    return new_coords = {
      x: game_object.position.x - (game_object.constructor.width / 2),
      y: game_object.position.y - (game_object.constructor.height / 2)
    };
  };

  define(["player"], function(Player) {
    var GameController;
    GameController = (function() {
      function GameController($canvas) {
        this.$canvas = $canvas;
        this.render = __bind(this.render, this);
        this.handle_clicks = __bind(this.handle_clicks, this);
        this.sync_canvas_size = __bind(this.sync_canvas_size, this);
        this.sync_canvas_size();
        this.context = this.$canvas.getContext("2d");
        this.player = new Player();
        return;
      }

      GameController.prototype.start = function() {
        this.setup_handlers();
        this.render();
      };

      GameController.prototype.setup_handlers = function() {
        window.onresize = this.sync_canvas_size;
        if (this.$canvas.addEventListener) {
          this.$canvas.addEventListener("click", this.handle_clicks, false);
        } else {
          el.attachEvent('onclick', this.handle_clicks);
        }
      };

      GameController.prototype.sync_canvas_size = function() {
        var height, width;
        width = document.body.clientWidth;
        height = document.body.clientHeight;
        this.$canvas.width = width;
        this.$canvas.height = height;
      };

      GameController.prototype.handle_clicks = function(e) {
        var x, y;
        x = e.x, y = e.y;
        this.player.move({
          x: x,
          y: y
        });
      };

      GameController.prototype.render = function() {
        var player_coords;
        this.context.clearRect(0, 0, this.$canvas.width, this.$canvas.height);
        player_coords = offset_game_object_coords(this.player);
        this.context.drawImage(this.player.render(), player_coords.x, player_coords.y);
        requestAnimationFrame(this.render);
      };

      return GameController;

    })();
    return GameController;
  });

}).call(this);
