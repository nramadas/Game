// Generated by CoffeeScript 1.6.3
(function() {
  var calculate_new_position, moduleKeywords, travelling_north_or_south,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  moduleKeywords = ['initialize_with', 'mixable_inits'];

  calculate_new_position = function(_arg) {
    var current_position, delta_multiplier, destination_position, new_pos, speed, _ref;
    _ref = _arg != null ? _arg : {}, current_position = _ref.current_position, destination_position = _ref.destination_position, speed = _ref.speed;
    delta_multiplier = destination_position < current_position ? -1 : 1;
    new_pos = current_position + (delta_multiplier * speed);
    if (destination_position < current_position) {
      return clamp(new_pos, destination_position, current_position);
    } else {
      return clamp(new_pos, current_position, destination_position);
    }
  };

  travelling_north_or_south = function(current_position, destination_position) {
    var x_diff, y_diff;
    x_diff = Math.abs(current_position.x - destination_position.x);
    y_diff = Math.abs(current_position.y - destination_position.y);
    return y_diff > x_diff;
  };

  define(function() {
    var GameObject;
    GameObject = (function() {
      GameObject.include = function(obj) {
        var key, value, _base;
        for (key in obj) {
          value = obj[key];
          if (__indexOf.call(moduleKeywords, key) < 0) {
            this.prototype[key] = value;
          }
        }
        if (obj.initialize_with != null) {
          if ((_base = this.prototype).mixable_inits == null) {
            _base.mixable_inits = [];
          }
          this.prototype.mixable_inits.push(obj.initialize_with);
        }
        return this;
      };

      GameObject.speed = 0;

      GameObject.height = 0;

      GameObject.width = 0;

      function GameObject() {
        this.move = __bind(this.move, this);
        this._move = __bind(this._move, this);
        var fn, _i, _len, _ref;
        if (this.mixable_inits != null) {
          _ref = this.mixable_inits;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            fn = _ref[_i];
            fn.apply(this);
          }
        }
        this._moving = false;
        this._direction = "west";
        this.position = {
          x: 0,
          y: 0
        };
        this.destination = {
          x: 0,
          y: 0
        };
        return;
      }

      GameObject.prototype.render = function() {
        if (this._moving) {
          return this.render_moving();
        } else {
          return this.render_stationary();
        }
      };

      GameObject.prototype.render_moving = function() {
        return this["render_moving_" + this._direction]();
      };

      GameObject.prototype.render_stationary = function() {
        return this["render_stationary_" + this._direction]();
      };

      GameObject.prototype.render_moving_north = function() {
        throw "NotImplemented";
      };

      GameObject.prototype.render_moving_south = function() {
        throw "NotImplemented";
      };

      GameObject.prototype.render_moving_east = function() {
        throw "NotImplemented";
      };

      GameObject.prototype.render_moving_west = function() {
        throw "NotImplemented";
      };

      GameObject.prototype.render_stationary_north = function() {
        throw "NotImplemented";
      };

      GameObject.prototype.render_stationary_south = function() {
        throw "NotImplemented";
      };

      GameObject.prototype.render_stationary_east = function() {
        throw "NotImplemented";
      };

      GameObject.prototype.render_stationary_west = function() {
        throw "NotImplemented";
      };

      GameObject.prototype.set_position = function(_arg) {
        var x, y;
        x = _arg.x, y = _arg.y;
        if (x != null) {
          this.position.x = x;
        }
        if (y != null) {
          this.position.y = y;
        }
      };

      GameObject.prototype._move = function(destination) {
        var _this = this;
        if (destination == null) {
          destination = {};
        }
        if (_.isEqual(this.destination, this.position)) {
          this._moving = false;
          return;
        }
        if (travelling_north_or_south(this.position, this.destination)) {
          if (this.destination.y < this.position.y) {
            this._direction = "north";
          } else {
            this._direction = "south";
          }
        } else {
          if (this.destination.x < this.position.x) {
            this._direction = "west";
          } else {
            this._direction = "east";
          }
        }
        this.position.x = calculate_new_position({
          current_position: this.position.x,
          destination_position: this.destination.x,
          speed: this.constructor.speed
        });
        this.position.y = calculate_new_position({
          current_position: this.position.y,
          destination_position: this.destination.y,
          speed: this.constructor.speed
        });
        requestAnimationFrame(function() {
          _this._move(_this.destination);
        });
      };

      GameObject.prototype.move = function(destination) {
        if (destination == null) {
          destination = {};
        }
        if (!_.isEqual(this.destination, destination)) {
          this.destination = destination;
        }
        if (this._moving) {
          return;
        }
        this._moving = true;
        this._move(this.destination);
      };

      GameObject.prototype.set_direction = function() {};

      return GameObject;

    })();
    return GameObject;
  });

}).call(this);
